// -----------------------------------------------------------------------
// Generated by FsmCompiler v1.1
// Finite state machine compiler tool
// Copyright 2015-2020 Rafael Serrano (rsr.openware@gmail.com)
//
// Warning. Don't touch. Changes will be overwritten!
//
// -----------------------------------------------------------------------


#include "MachineState.h"
#include "MachineContext.h"


namespace app {

    State::State(
        Context* context) :
        eos::FsmStateBase(context) {
    }

    void State::enter() {
    }

    void State::exit() {
    }

    void State::transition_SW1Pressed() {
    }

    void State::transition_SW2Pressed() {
    }

    void State::transition_SW3Pressed() {
    }

    WaitingSW1::WaitingSW1(
        Context* context) :
        State(context) {
    }

    void WaitingSW1::enter() {
        Context* ctx = static_cast<Context*>(getContext());
        ctx->doLED1On();
    }

    void WaitingSW1::transition_SW1Pressed() {
        Context* ctx = static_cast<Context*>(getContext());
        if (true) {
            ctx->clearState();
            ctx->doLED1Off();
            ctx->setState(ctx->getStateInstance(Context::StateID::WaitingSW2));
        }
    }

    WaitingSW2::WaitingSW2(
        Context* context) :
        State(context) {
    }

    void WaitingSW2::enter() {
        Context* ctx = static_cast<Context*>(getContext());
        ctx->doLED2On();
    }

    void WaitingSW2::transition_SW2Pressed() {
        Context* ctx = static_cast<Context*>(getContext());
        if (true) {
            ctx->clearState();
            ctx->doLED2Off();
            ctx->setState(ctx->getStateInstance(Context::StateID::WaitingSW3));
        }
    }

    WaitingSW3::WaitingSW3(
        Context* context) :
        State(context) {
    }

    void WaitingSW3::enter() {
        Context* ctx = static_cast<Context*>(getContext());
        ctx->doLED3On();
    }

    void WaitingSW3::transition_SW3Pressed() {
        Context* ctx = static_cast<Context*>(getContext());
        if (true) {
            ctx->clearState();
            ctx->doLED3Off();
            ctx->setState(ctx->getStateInstance(Context::StateID::WaitingSW1));
        }
    }

}
