// -----------------------------------------------------------------------
// Generated by FsmCompiler v1.1
// Finite state machine compiler tool
// Copyright 2015-2020 Rafael Serrano (rsr.openware@gmail.com)
//
// Warning. Don't touch. Changes will be overwritten!
//
// -----------------------------------------------------------------------


#include "MachineState.h"
#include "MachineContext.h"


namespace app {

    class State;

    Context::Context() {
        states[int(StateID::WaitingSW1)] = new WaitingSW1(this);
        states[int(StateID::WaitingSW2)] = new WaitingSW2(this);
        states[int(StateID::WaitingSW3)] = new WaitingSW3(this);
    }

    State* Context::getStateInstance(
        StateID id) {
        return states[int(id)];
    }

    void Context::start() {
        doLED1Off();
        doLED2Off();
        doLED3Off();
        initialize(getStateInstance(StateID::WaitingSW1));
    }

    void Context::end() {
    }

    void Context::transition_SW1Pressed() {
        static_cast<State*>(getState())->transition_SW1Pressed();
    }

    void Context::transition_SW2Pressed() {
        static_cast<State*>(getState())->transition_SW2Pressed();
    }

    void Context::transition_SW3Pressed() {
        static_cast<State*>(getState())->transition_SW3Pressed();
    }

}
