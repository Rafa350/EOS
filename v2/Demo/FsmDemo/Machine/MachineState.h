// -----------------------------------------------------------------------
// Generated by FsmCompiler v1.1
// Finite state machine compiler tool
// Copyright 2015-2020 Rafael Serrano (rsr.openware@gmail.com)
//
// Warning. Don't touch. Changes will be overwritten!
//
// -----------------------------------------------------------------------

#ifndef __MACHINESTATE_H
#define __MACHINESTATE_H


#include "eos.h"
#include "Services/Fsm/eosFsmStateBase.h"


namespace app {

    class State: public eos::FsmStateBase {
        protected:
            State();
        public:
            virtual void onSW1_ON(Context* context);
            virtual void onSW2_ON(Context* context);
            virtual void onSW3_ON(Context* context);
            virtual void onTMR1_TIMEOUT(Context* context);
    };

    class WaitingSW1 {
        private:
            static WaitingSW1* instance;
        protected:
            WaitingSW1();
        public:
            static WaitingSW1* getInstance();
            void onSW1_ON(Context* context) override;
    };

    class WaitingSW2 {
        private:
            static WaitingSW2* instance;
        protected:
            WaitingSW2();
        public:
            static WaitingSW2* getInstance();
            void onSW2_ON(Context* context) override;
    };

    class WaitingSW3 {
        private:
            static WaitingSW3* instance;
        protected:
            WaitingSW3();
        public:
            static WaitingSW3* getInstance();
            void onSW3_ON(Context* context) override;
    };

    class WaitingTMR1 {
        private:
            static WaitingTMR1* instance;
        protected:
            WaitingTMR1();
        public:
            static WaitingTMR1* getInstance();
            void onTMR1_TIMEOUT(Context* context) override;
    };

}


#endif // __MACHINESTATE_H
